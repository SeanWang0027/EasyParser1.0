['int', 'identifier', ';', 'int', 'identifier', ';', 'int', 'identifier', '(', 'int', 'identifier', ',', 'int', 'identifier', ',', 'int', 'identifier', ')', '{', 'int', 'identifier', ';', 'int', 'identifier', ';', 'identifier', '=', 'number', ';', 'if', '(', 'identifier', '>', '(', 'identifier', '+', 'identifier', ')', ')', '{', 'identifier', '=', 'identifier', '+', '(', 'identifier', '*', 'identifier', '+', 'number', ')', ';', '}', 'else', '{', 'identifier', '=', 'identifier', ';', '}', 'identifier', '=', 'identifier', '+', 'number', ';', 'while', '(', 'identifier', '<=', 'number', ')', '{', 'identifier', '=', 'identifier', '*', 'number', ';', 'identifier', '=', 'identifier', '}', 'return', 'identifier', ';', '}', '#']  has an analyze Stack：
0          #          int identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 4        		 # int      		 identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 6        		 # type_specifier 		 identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 6 10     		 # type_specifier identifier 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 6 10 12  		 # type_specifier identifier M_declaration_parameter 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 6 10 12 16 		 # type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 6 11     		 # type_specifier declaration_parameter 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 6 11 15  		 # type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 6 11 15 20 		 # type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 3        		 # declaration 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1        		 # external_declaration 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 4      		 # external_declaration int 		 identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 6      		 # external_declaration type_specifier 		 identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 6 10   		 # external_declaration type_specifier identifier 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 6 10 12 		 # external_declaration type_specifier identifier M_declaration_parameter 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 6 10 12 16 		 # external_declaration type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 6 11   		 # external_declaration type_specifier declaration_parameter 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 6 11 15 		 # external_declaration type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 6 11 15 20 		 # external_declaration type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 3      		 # external_declaration declaration 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1      		 # external_declaration external_declaration 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 4    		 # external_declaration external_declaration int 		 identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6    		 # external_declaration external_declaration type_specifier 		 identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 		 # external_declaration external_declaration type_specifier identifier 		 ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 		 # external_declaration external_declaration type_specifier identifier M_function_definition 		 ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( 		 int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 4 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( int 		 identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier 		 identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 38 79 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier identifier 		 , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter 		 , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , 		 int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 4 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , int 		 identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , type_specifier 		 identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 35 75 38 79 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , type_specifier identifier 		 , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 111 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter 		 , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 111 75 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , 		 int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 111 75 4 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , int 		 identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 111 75 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , type_specifier 		 identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 35 75 111 75 38 79 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , type_specifier identifier 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 111 75 111 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , function_parameter 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 111 75 111 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 75 111 133 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 35 77 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) 		 { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { 		 int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 4 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 156 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 39 12 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 39 12 16 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 190 207 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 190 207 218 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 154 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 4 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 156 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 39 12 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 39 12 16 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 190 207 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 156 190 207 218 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 154 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用number归约:
0 1 1 6 10 13 18 36 78 113 134 149 163 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator number 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 195 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 157 192 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 150 173 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if 		 ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( 		 identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 107 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( identifier 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 64 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( primary_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( third_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( second_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( first_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression > 		 ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator 		 ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( 		 identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( identifier 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 64 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( primary_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( third_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( second_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 68 74 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression + 		 identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 68 109 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator 		 identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 68 109 107 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator identifier 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 68 109 64 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator primary_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 68 109 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator third_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 68 109 132 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator second_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( single_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( and_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 57 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( or_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( constant_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 105 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 63 105 131 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( expression ) 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 64 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator primary_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator third_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator second_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 103 129 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator first_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( and_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 57 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( or_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) 		 { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement 		 { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { 		 identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 23 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 74 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression + 		 ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator 		 ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( 		 identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( identifier 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 64 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( primary_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( third_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 62 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression * 		 identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 62 104 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator 		 identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 62 104 107 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator identifier 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 62 104 130 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator primary_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 68 74 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression + 		 number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 68 109 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator 		 number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用number归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 68 109 69 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator number 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 68 109 64 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator primary_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 68 109 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator third_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 68 109 132 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator second_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( single_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( and_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 57 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( or_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( constant_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 66 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 28 66 106 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( expression ) 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator primary_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator third_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 73 110 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator second_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 149 163 195 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 157 192 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 150 173 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list expression_statement 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list statement 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 230 240 248 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list } 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 229 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement compound_statement 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else 		 { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement 		 { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { 		 identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list 		 identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier 		 = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier = 		 identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator 		 identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 23 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator identifier 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator primary_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator third_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator second_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 149 163 195 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 157 192 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression_list 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 150 173 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression_list ; 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list expression_statement 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list statement 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 152 174 196 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list } 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 151 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement compound_statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 145 162 194 210 221 235 244 251 255 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 155 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list selection_statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 149 163 23 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 33 74 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression + 		 number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 33 73 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator 		 number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用number归约:
0 1 1 6 10 13 18 36 78 113 134 149 163 33 73 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator number 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 33 73 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator primary_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 33 73 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator third_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 33 73 110 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator second_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 149 163 195 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 157 192 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 150 173 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while 		 ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement 		 ( identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( 		 identifier <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 159 193 209 107 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( identifier 		 <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 64 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( primary_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( third_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( second_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( first_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 46 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression <= 		 number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 103 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator 		 number ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
用number归约:
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 103 69 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator number 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 103 64 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator primary_expression 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 103 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator third_expression 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 103 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator second_expression 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 103 129 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator first_expression 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( and_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 57 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( or_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression 		 ) { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) 		 { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement 		 { identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { 		 identifier = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier * number ; identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 23 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 * number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 27 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression * 		 number ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 27 55 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator 		 number ; identifier = identifier } return identifier ; } #
用number归约:
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 27 55 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator number 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 27 55 99 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator primary_expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 21 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 195 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 157 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 157 192 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 150 173 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list expression_statement 		 identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 158 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list statement 		 identifier = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier } return identifier ; } #
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier } return identifier ; } #
用identifier归约:
0 1 1 6 10 13 18 36 78 113 134 159 193 209 220 223 237 152 174 149 163 23 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 } return identifier ; } #
error

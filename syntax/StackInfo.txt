['int', 'identifier', ';', 'int', 'identifier', ';', 'int', 'identifier', '(', 'int', 'identifier', ',', 'int', 'identifier', ',', 'int', 'identifier', ')', '{', 'int', 'identifier', ';', 'int', 'identifier', ';', 'identifier', '=', 'number', ';', 'if', '(', 'identifier', '>', '(', 'identifier', '+', 'identifier', ')', ')', '{', 'identifier', '=', 'identifier', '+', '(', 'identifier', '*', 'identifier', '+', 'number', ')', ';', '}', 'else', '{', 'identifier', '=', 'identifier', ';', '}', 'identifier', '=', 'identifier', '+', 'number', ';', 'while', '(', 'identifier', '<=', 'number', ')', '{', 'identifier', '=', 'identifier', '*', 'number', ';', 'identifier', '=', 'identifier', ';', '}', 'return', 'identifier', ';', '}', '#']  has an analyze Stack：
0          #          int identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 8        		 # int      		 identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 2        		 # type_specifier 		 identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 2 10     		 # type_specifier identifier 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 2 10 15  		 # type_specifier identifier M_declaration_parameter 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 2 10 15 19 		 # type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 2 9      		 # type_specifier declaration_parameter 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 2 9 12   		 # type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 2 9 12 16 		 # type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 1        		 # declaration 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6        		 # external_declaration 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 8      		 # external_declaration int 		 identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 2      		 # external_declaration type_specifier 		 identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 2 10   		 # external_declaration type_specifier identifier 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 2 10 15 		 # external_declaration type_specifier identifier M_declaration_parameter 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 2 10 15 19 		 # external_declaration type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 2 9    		 # external_declaration type_specifier declaration_parameter 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 2 9 12 		 # external_declaration type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 2 9 12 16 		 # external_declaration type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 1      		 # external_declaration declaration 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6      		 # external_declaration external_declaration 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 8    		 # external_declaration external_declaration int 		 identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2    		 # external_declaration external_declaration type_specifier 		 identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 		 # external_declaration external_declaration type_specifier identifier 		 ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 		 # external_declaration external_declaration type_specifier identifier M_function_definition 		 ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( 		 int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( int 		 identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier 		 identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 24 43 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier identifier 		 , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter 		 , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , 		 int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , int 		 identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , type_specifier 		 identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 26 45 24 43 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , type_specifier identifier 		 , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 83 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter 		 , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 83 45 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , 		 int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 83 45 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , int 		 identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 83 45 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , type_specifier 		 identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 26 45 83 45 24 43 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , type_specifier identifier 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 83 45 83 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , function_parameter 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 83 45 83 115 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 45 83 115 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 26 44 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) 		 { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { 		 int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 140 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 22 15 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 22 15 19 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 161 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 161 194 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 161 194 210 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 139 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 140 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 22 15 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 22 15 19 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 161 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 161 194 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 140 161 194 210 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 139 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 169 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 6 6 2 10 14 18 23 42 82 114 147 171 40 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator number 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 149 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 138 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 138 160 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 137 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if 		 ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( 		 identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 91 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( identifier 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( primary_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( third_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( second_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 67 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( first_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 76 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression > 		 ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator 		 ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( 		 identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 66 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( identifier 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( primary_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( third_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( second_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 67 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 67 73 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression + 		 identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 67 95 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator 		 identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 67 95 91 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator identifier 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 67 95 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator primary_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 67 95 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator third_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 67 95 121 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator second_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 67 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( single_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( and_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( or_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( constant_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 93 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 62 93 119 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( expression ) 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator primary_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator third_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator second_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 96 122 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator first_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( and_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( or_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) 		 { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement 		 { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { 		 identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 169 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 73 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression + 		 ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator 		 ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( 		 identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 66 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( identifier 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( primary_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( third_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 58 49 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression * 		 identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 58 89 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator 		 identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 58 89 91 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator identifier 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 58 89 117 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator primary_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 67 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 67 73 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression + 		 number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 67 95 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator 		 number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 67 95 69 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator number 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 67 95 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator primary_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 67 95 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator third_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 67 95 121 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator second_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 67 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( single_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( and_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( or_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 65 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( constant_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 57 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 33 57 88 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( expression ) 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator primary_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator third_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 71 112 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator second_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 147 171 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 149 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 138 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 138 160 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 137 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list expression_statement 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list statement 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 236 245 252 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list } 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 224 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement compound_statement 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else 		 { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement 		 { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { 		 identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list 		 identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier 		 = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 169 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier = 		 identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator 		 identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator identifier 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator primary_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator third_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator second_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 147 171 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 149 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 138 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression_list 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 138 160 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression_list ; 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 137 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list expression_statement 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list statement 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 150 191 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list } 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 135 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement compound_statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 144 162 195 211 221 233 241 249 255 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 141 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list selection_statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 169 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 147 171 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 38 73 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression + 		 number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 38 71 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator 		 number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 6 6 2 10 14 18 23 42 82 114 147 171 38 71 40 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator number 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 38 71 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator primary_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 38 71 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator third_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 38 71 112 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator second_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 147 171 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 149 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 138 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 138 160 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 137 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while 		 ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement 		 ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( 		 identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 146 163 196 91 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( identifier 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( primary_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( third_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( second_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 67 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( first_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 74 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression <= 		 number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 96 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator 		 number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 96 69 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator number 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 96 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator primary_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 96 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator third_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 96 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator second_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 96 122 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator first_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 68 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( and_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 61 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( or_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) 		 { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement 		 { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { 		 identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 169 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 * number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 29 49 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression * 		 number ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 29 51 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator 		 number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 29 51 40 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator number 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 29 51 85 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator primary_expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 149 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 138 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 138 160 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 137 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list expression_statement 		 identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list statement 		 identifier = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 169 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier ; } return identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 31 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 38 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 39 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 147 171 197 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 149 190 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 138 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 138 160 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 137 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list expression_statement 		 } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list statement 		 } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 } return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 150 191 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list } 		 return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 135 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement compound_statement 		 return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 146 163 196 212 222 237 246 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement statement 		 return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 142 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list iteration_statement 		 return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 return identifier ; } #
0 6 6 2 10 14 18 23 42 82 114 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return 		 identifier ; } #
用identifier归约:
0 6 6 2 10 14 18 23 42 82 114 148 184 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return identifier 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 181 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return primary_expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 178 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return third_expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 176 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 185 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return first_expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 187 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return single_bool_expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return and_bool_expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 179 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return or_bool_expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 183 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return constant_expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 175 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return expression 		 ; } #     
0 6 6 2 10 14 18 23 42 82 114 148 175 199 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return expression ; 		 } #       
0 6 6 2 10 14 18 23 42 82 114 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list jump_statement 		 } #       
0 6 6 2 10 14 18 23 42 82 114 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 } #       
0 6 6 2 10 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 } #       
0 6 6 2 10 14 18 23 42 82 114 143 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list } 		 #         
0 6 6 2 10 14 18 23 42 81 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) compound_statement 		 #         
0 6 6 3    		 # external_declaration external_declaration function_definition 		 #         
0 6 6 6    		 # external_declaration external_declaration external_declaration 		 #         
0 6 6 6 11 		 # external_declaration external_declaration external_declaration start 		 #         
0 6 6 11   		 # external_declaration external_declaration start 		 #         
0 6 11     		 # external_declaration start 		 #         
0 4        		 # start    		 #         
Accepted

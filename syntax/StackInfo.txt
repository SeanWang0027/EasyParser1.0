['int', 'identifier', ';', 'int', 'identifier', ';', 'int', 'identifier', '(', 'int', 'identifier', ',', 'int', 'identifier', ',', 'int', 'identifier', ')', '{', 'int', 'identifier', ';', 'int', 'identifier', ';', 'identifier', '=', 'number', ';', 'if', '(', 'identifier', '>', '(', 'identifier', '+', 'identifier', ')', ')', '{', 'identifier', '=', 'identifier', '+', '(', 'identifier', '*', 'identifier', '+', 'number', ')', ';', '}', 'else', '{', 'identifier', '=', 'identifier', ';', '}', 'identifier', '=', 'identifier', '+', 'number', ';', 'while', '(', 'identifier', '<=', 'number', ')', '{', 'identifier', '=', 'identifier', '*', 'number', ';', 'identifier', '=', 'identifier', ';', '}', 'return', 'identifier', ';', '}', '#']  has an analyze Stack：
0          #          int identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 8        		 # int      		 identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 7        		 # type_specifier 		 identifier ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 7 11     		 # type_specifier identifier 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 7 11 15  		 # type_specifier identifier M_declaration_parameter 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 7 11 15 19 		 # type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 7 10     		 # type_specifier declaration_parameter 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 7 10 12  		 # type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 7 10 12 16 		 # type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 2        		 # declaration 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3        		 # external_declaration 		 int identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 8      		 # external_declaration int 		 identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 7      		 # external_declaration type_specifier 		 identifier ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 7 11   		 # external_declaration type_specifier identifier 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 7 11 15 		 # external_declaration type_specifier identifier M_declaration_parameter 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 7 11 15 19 		 # external_declaration type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 7 10   		 # external_declaration type_specifier declaration_parameter 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 7 10 12 		 # external_declaration type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 7 10 12 16 		 # external_declaration type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 2      		 # external_declaration declaration 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3      		 # external_declaration external_declaration 		 int identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 8    		 # external_declaration external_declaration int 		 identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7    		 # external_declaration external_declaration type_specifier 		 identifier ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 		 # external_declaration external_declaration type_specifier identifier 		 ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 		 # external_declaration external_declaration type_specifier identifier M_function_definition 		 ( int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( 		 int identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( int 		 identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier 		 identifier , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 26 46 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( type_specifier identifier 		 , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter 		 , int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , 		 int identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , int 		 identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , type_specifier 		 identifier , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 24 43 26 46 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , type_specifier identifier 		 , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 83 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter 		 , int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 83 43 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , 		 int identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 83 43 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , int 		 identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 83 43 26 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , type_specifier 		 identifier ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 24 43 83 43 26 46 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , type_specifier identifier 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 83 43 83 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , function_parameter 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 83 43 83 115 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter , function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 43 83 115 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter , function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 24 45 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter function_parameter_list_suffix 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list 		 ) { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) 		 { int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { 		 int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 148 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 22 15 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 22 15 19 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 180 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 180 207 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 180 207 220 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 138 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 int identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 8 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list int 		 identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier 		 identifier ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 148 22 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 22 15 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 22 15 19 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier identifier M_declaration_parameter declaration_parameter_assign 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 180 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 180 207 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix 		 ; identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 148 180 207 220 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list type_specifier declaration_parameter declaration_parameter_suffix ; 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 138 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list declaration 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 number ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 3 3 7 11 14 18 23 42 82 114 150 189 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator number 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 35 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 141 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 141 175 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 142 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 142 177 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 140 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 if ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if 		 ( identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( 		 identifier > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 89 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( identifier 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( primary_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( third_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( second_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( first_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression 		 > ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 75 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression > 		 ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator 		 ( identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( 		 identifier + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( identifier 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( primary_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( third_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( second_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression 		 + identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 50 48 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression + 		 identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 50 85 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator 		 identifier ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 50 85 89 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator identifier 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 50 85 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator primary_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 50 85 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator third_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 50 85 116 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression first_operator second_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( first_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( single_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 52 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( and_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 55 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( or_bool_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 57 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( constant_expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 86 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( expression 		 ) ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 51 86 117 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator ( expression ) 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator primary_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator third_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator second_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 92 121 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression bool_operator first_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( single_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 52 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( and_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 55 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( or_bool_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression 		 ) { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) 		 { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement 		 { identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { 		 identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 40 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 + ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 48 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression + 		 ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator 		 ( identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( 		 identifier * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 63 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( identifier 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( primary_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( third_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression 		 * identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 56 70 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression * 		 identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 56 91 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator 		 identifier + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 56 91 89 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator identifier 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 56 91 120 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression second_operator primary_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( second_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression 		 + number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 50 48 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression + 		 number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 50 85 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator 		 number ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 50 85 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator number 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 50 85 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator primary_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 50 85 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator third_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 50 85 116 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression first_operator second_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( first_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( single_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 52 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( and_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 55 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( or_bool_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 57 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( constant_expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 62 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( expression 		 ) ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 28 62 93 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator ( expression ) 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator primary_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator third_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 49 84 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression first_operator second_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 35 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 150 189 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 141 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 141 175 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 142 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 142 177 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 140 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list expression_statement 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list statement 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list 		 } else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 236 245 252 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement { statement_list } 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 224 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement compound_statement 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement 		 else { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else 		 { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement 		 { identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { 		 identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list 		 identifier = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier 		 = identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier = 		 identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator 		 identifier ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 40 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator identifier 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator primary_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator third_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator second_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 35 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 150 189 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list identifier assignment_operator expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 141 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 141 175 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 142 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression_list 		 ; } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 142 177 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list assignment_expression_list ; 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 140 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list expression_statement 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list statement 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list 		 } identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 149 181 208 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement { statement_list } 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 135 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement compound_statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 144 178 205 218 222 225 238 247 253 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list if ( constant_expression ) M_selection_statement statement else N_selection_statement statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 145 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list selection_statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 identifier = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier 		 = identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier = 		 identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator 		 identifier + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 150 189 40 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator identifier 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator primary_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator third_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator second_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 + number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 27 48 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression + 		 number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 27 49 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator 		 number ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 3 3 7 11 14 18 23 42 82 114 150 189 27 49 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator number 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 27 49 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator primary_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 27 49 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator third_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 27 49 84 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression first_operator second_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator first_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 35 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator single_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator and_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator or_bool_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator constant_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 150 189 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list identifier assignment_operator expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 141 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 141 175 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression assignment_expression_list_suffix 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 142 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list 		 ; while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 142 177 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list assignment_expression_list ; 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 140 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list expression_statement 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 while ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while 		 ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement 		 ( identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( 		 identifier <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 146 179 206 89 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( identifier 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( primary_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( third_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( second_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 50 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( first_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression 		 <= number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 79 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression <= 		 number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 92 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator 		 number ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 92 53 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator number 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 92 59 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator primary_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 92 60 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator third_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 92 56 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator second_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 92 121 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression bool_operator first_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 58 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( single_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 52 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( and_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 55 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( or_bool_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression 		 ) { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) 		 { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement 		 { identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { 		 identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier * number ; identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 40 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 * number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 33 70 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression * 		 number ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 33 71 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator 		 number ; identifier = identifier ; } return identifier ; } #
用number归约:
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 33 71 30 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator number 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 33 71 97 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression second_operator primary_expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 35 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 141 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 141 175 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 142 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 142 177 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 140 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list expression_statement 		 identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list statement 		 identifier = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 identifier = identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier 		 = identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 191 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier = 		 identifier ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator 		 identifier ; } return identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 40 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator identifier 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 36 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator primary_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 37 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator third_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 33 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator second_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 27 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator first_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 35 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator single_bool_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 29 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator and_bool_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 32 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator or_bool_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 34 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator constant_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 150 189 209 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list identifier assignment_operator expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 141 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 141 175 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression assignment_expression_list_suffix 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 142 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list 		 ; } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 142 177 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list assignment_expression_list ; 		 } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 140 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list expression_statement 		 } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list statement 		 } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list 		 } return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 149 181 208 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement { statement_list } 		 return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 135 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement compound_statement 		 return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 146 179 206 219 223 237 246 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list while N_iteration_statement ( constant_expression ) M_selection_statement statement 		 return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 147 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list iteration_statement 		 return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 return identifier ; } #
0 3 3 7 11 14 18 23 42 82 114 139 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return 		 identifier ; } #
用identifier归约:
0 3 3 7 11 14 18 23 42 82 114 139 174 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return identifier 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 169 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return primary_expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 170 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return third_expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 166 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return second_expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 160 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return first_expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 168 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return single_bool_expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 162 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return and_bool_expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 165 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return or_bool_expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 167 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return constant_expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 172 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return expression 		 ; } #     
0 3 3 7 11 14 18 23 42 82 114 139 172 202 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list return expression ; 		 } #       
0 3 3 7 11 14 18 23 42 82 114 143 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list jump_statement 		 } #       
0 3 3 7 11 14 18 23 42 82 114 136 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list statement 		 } #       
0 3 3 7 11 14 18 23 42 82 114 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list 		 } #       
0 3 3 7 11 14 18 23 42 82 114 137 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) { statement_list } 		 #         
0 3 3 7 11 14 18 23 42 81 		 # external_declaration external_declaration type_specifier identifier M_function_definition ( function_parameter_list ) compound_statement 		 #         
0 3 3 1    		 # external_declaration external_declaration function_definition 		 #         
0 3 3 3    		 # external_declaration external_declaration external_declaration 		 #         
0 3 3 3 9  		 # external_declaration external_declaration external_declaration start 		 #         
0 3 3 9    		 # external_declaration external_declaration start 		 #         
0 3 9      		 # external_declaration start 		 #         
0 5        		 # start    		 #         
Accepted
